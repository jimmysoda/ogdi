#ifndef _PROTO_H_
#define _PROTO_H_

#undef _ANSI_ARGS_
#undef CONST
#if ((defined(__STDC__) || defined(SABER)) && !defined(NO_PROTOTYPE)) || defined(__cplusplus)
#   define _USING_PROTOTYPES_ 1
#   define _ANSI_ARGS_(x)	x
#   define CONST const
#   ifdef __cplusplus
#       define VARARGS(first) (first, ...)
#   else
#       define VARARGS(first) ()
#   endif
#else
#   define _ANSI_ARGS_(x)	()
#   define CONST
#endif



extern void (G_3dview_warning) _ANSI_ARGS_( (int b));
extern int G__check_for_auto_masking (void);
extern int G__check_format (int fd);
extern int G__check_gisinit(void);
extern void G__color_free_lookup (struct _Color_Info_ *cp);
extern void G__color_free_rules (struct _Color_Info_ *cp);
extern void G__color_reset (struct Colors *colors);
extern void G__create_alt_env(void);
extern void G__create_alt_search_path(void);
extern void G__create_window_mapping (int fd);
extern char * G__env_name (int n);
extern char * G__file_name (char *path, char *element, char *name, char *mapset);
extern char * G__find_file (char *element, char *name, char *mapset);
extern char * G__get_gisrc_file(void);
extern  char * G__get_window (struct Cell_head *window, char *element, char *name, char *mapset);
extern  char * G__getenv (char *name);
extern  char * G__home (void);
extern  void G__init_window (void);
extern  int G__insert_color_into_lookup (CELL cat, int red, int grn, int blu, struct _Color_Info_ *cp);
extern  void G__interpolate_color_rule (CELL cat, unsigned char *red, unsigned char *grn, unsigned char *blu, struct _Color_Rule_ *rule);
extern  char * G__location_path(void);
extern  void G__lookup_colors (CELL *cell, unsigned char *red, unsigned char *grn, unsigned char *blu, unsigned char *set, int n, struct Colors *colors, int mod, int rules_only);
extern  char *G__machine_name(void);
extern  int G__make_mapset_element (char *p_element);
extern  char * G__mapset_name (int n);
extern  int G__mapset_permissions (char *mapset);
extern  int G__mask_info (char *name, char *mapset);
extern  int G__name_in_mapset (char *name_in, char *name_out, char *mapset);
extern  int G__name_is_fully_qualified (char *fullname, char *name, char *mapset);
extern  int G__open (char *element, char *name, char *mapset, int mode);
extern  int G__open_cell_new (char *name, int open_mode);
extern  int G__open_cell_old (char *name, char *mapset);
extern  void G__organize_colors (struct Colors *colors);
extern  char * G__projection_name(int n);
extern  int G__projection_units(int n);
extern  int G__put_window (struct Cell_head *window, char *dir, char *name);
extern  char * G__read_Cell_head (FILE *fd, struct Cell_head *cellhd, int is_cellhd);
extern  CELL G__read_cats (char *element, char *name, char *mapset, struct Categories *pcats, int full);
extern  void G__read_env(void);
extern  int G__read_row_ptrs (int fd);
extern  void G__set_gisrc_file(char *name);
extern  void G__setenv (char *name, char *value);
extern  void G__switch_env(void);
extern  void G__switch_search_path(void);
extern  void G__temp_element(char *element);
extern  char * G__tempfile (int pid);
extern  char * G__unit_name (int unit, int plural);
extern  int G__write_Cell_head (FILE *fd, struct Cell_head *cellhd, int is_cellhd);
extern  int G__write_cats (char *element, char *name, struct Categories *cats);
extern  int G__write_colors (FILE *fd, struct Colors *colors);
extern  void G__write_env(void);
extern  int G__write_row_ptrs (int fd);
extern  int G_add_aspect_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_add_color_rule (CELL cat1, int r1, int g1, int b1, CELL cat2, int r2, int g2, int b2, struct Colors *colors);
extern  int G_add_grey_scale_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_add_gyr_colors (struct Colors *colors, CELL min, CELL max);
extern  void G_add_histogram (CELL cat, long int count, struct Histogram *histogram);
extern  int G_add_modular_color_rule (CELL cat1, int r1, int g1, int b1, CELL cat2, int r2, int g2, int b2, struct Colors *colors);
extern  int G_add_rainbow_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_add_ramp_colors  (struct Colors *colors, CELL min, CELL max);
extern  int G_add_ryg_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_add_wave_colors  (struct Colors *colors, CELL min, CELL max);
extern  double G_adjust_east_longitude (double east, double west);
extern  double G_adjust_easting (double east, struct Cell_head *window);
extern  char * G_adjust_Cell_head (struct Cell_head *cellhd, int row_flag, int col_flag);
extern  void G_adjust_window_to_box (struct Cell_head *src, struct Cell_head *dst, int rows, int cols);
extern  char * G_align_window (struct Cell_head *window, struct Cell_head *ref);
extern  float ** G_alloc_fmatrix(int rows, int cols);
extern  float * G_alloc_fvector(int n);
extern  int ** G_alloc_imatrix(int rows, int cols);
extern  int * G_alloc_ivector(int n);
extern  double ** G_alloc_matrix(int rows, int cols);
extern  double * G_alloc_vector(int n);
extern  CELL * G_allocate_cell_buf (void);
extern  double G_area_for_zone_on_ellipsoid (register double north, register double south);
extern  double G_area_for_zone_on_sphere (register double north, register double south);
extern  double G_area_of_cell_at_row (register int row);
extern  double G_area_of_polygon(double *x, double *y, int n);
extern  void G_ascii_check(char *string);
extern  char * G_ask_any (char *prompt, char *name, char *element, char *desc, int warn);
extern  char * G_ask_any_ext (char *prompt, char *name, char *element, char *desc, int warn, char *option, int (*lister) ());
extern  char * G_ask_cell_any (char *prompt, char *name);
extern  char * G_ask_cell_in_mapset (char *prompt, char *name);
extern  char * G_ask_cell_new (char *prompt, char *name);
extern  char * G_ask_cell_old (char *prompt, char *name);
extern  int G_ask_ellipse_name(char *spheriod);
extern  char * G_ask_in_mapset (char *prompt, char *name, char *element, char *desc);
extern  char * G_ask_in_mapset_ext (char *prompt, char *name, char *element, char *desc, char *option, int (*lister) ());
extern  char * G_ask_new (char *prompt, char *name, char *element, char *desc);
extern  char * G_ask_new_ext (char *prompt, char *name, char *element, char *desc, char *option, int (*lister) ());
extern  char * G_ask_old (char *prompt, char *name, char *element, char *desc);
extern  char * G_ask_old_ext (char *prompt, char *name, char *element, char *desc, char *option, int (*lister) ());
extern  int G_ask_proj_name(char *proj_id, char *proj_name);
extern  char * G_ask_sites_any (char *prompt, char *name);
extern  char * G_ask_sites_in_mapset (char *prompt, char *name);
extern  char * G_ask_sites_new (char *prompt, char *name);
extern  char * G_ask_sites_old (char *prompt, char *name);
extern  char * G_ask_vector_any (char *prompt, char *name);
extern  char * G_ask_vector_in_mapset (char *prompt, char *name);
extern  char * G_ask_vector_new (char *prompt, char *name);
extern  char * G_ask_vector_old (char *prompt, char *name);
extern  int G_begin_cell_area_calculations(void);
extern  int G_begin_distance_calculations(void);
extern  void G_begin_ellipsoid_polygon_area (double a, double e2);
extern  void G_begin_geodesic_distance (double a, double e2);
extern  int G_begin_geodesic_equation (double lon1, double lat1, double lon2, double lat2);
extern  int G_begin_polygon_area_calculations(void);
extern  int G_begin_rhumbline_equation (double lon1, double lat1, double lon2, double lat2);
extern  void G_begin_zone_area_on_ellipsoid (double a, double e2, double s);
extern  void G_begin_zone_area_on_sphere (double r, double s);
extern  void G_bresenham_line (register int x0, register int y0, int x1, int y1, int (*point) );
extern  char * G_calloc (int m, int n);
extern  int G_cell_stats_histo_eq (struct Cell_stats *statf, CELL min1, CELL max1, CELL min2, CELL max2, int zero, void (*func) ());
extern  int G_cellvalue_format (CELL v);
extern  char * G_chrcat (register char *T, register char *F, register int n);
extern  char * G_chrcpy (register char *T, register char *F, register int n);
extern  char * G_chrmov (register char *T, register char *F, register int n);
extern  void G_clear_screen(void);
extern  int G_close_cell (int fd);
extern  double G_col_to_easting (double col, struct Cell_head *window);
extern  char * G_color_name (int n);
extern  int G_color_values (char *name, float *r, float *g, float *b);
extern  void G_copy (char *a, char *b, int n);
extern  struct Key_Value * G_create_key_value(void);
extern  double G_darea0_on_ellipsoid (register double lat);
extern  double G_darea0_on_sphere (register double lat);
extern  char * G_database_projection_name(void);
extern  char * G_database_unit_name(int plural);
extern  double G_database_units_to_meters_factor(void);
extern  char * G_date(void);
extern  int G_def_window(struct Cell_head *window);
extern  struct Flag * G_define_flag(void);
extern  struct Option * G_define_option(void);
extern  void G_disable_interactive(void);
extern  double G_distance (double e1, double n1, double e2, double n2);
extern  double G_distance2_point_to_line (double x, double y, double x1, double y1, double x2, double y2);
extern  void G_done_msg(char *msg);
extern  double G_easting_to_col (double east, struct Cell_head *window);
extern  int G_edit_cats (char *name, struct Categories *cats, int option);
extern  int G_edit_cellhd (struct Cell_head *cellhd, int type);
extern  int G_edit_history (struct History *phist);
extern  double G_ellipsoid_grid_dist (double a, double e2, double lon1, double lat1, double lon2, double lat2);
extern  double G_ellipsoid_grid_dist (double a, double e2, double lon1, double lat1, double lon2, double lat2);
extern  char * G_ellipsoid_name (int n);
extern  double G_ellipsoid_polygon_area (double *lon, double *lat, int n);
extern  void G_extend_histogram (CELL cat, long int count, struct Histogram *histogram);
extern  void G_fastgisinit(char *gisdbase, char *location, char *mapset);
extern  void G_fatal_error (char *msg);
extern  char * G_find_cell (char *name, char *mapset);
extern  char * G_find_cell2 (char *name, char *mapset);
extern  int G_find_cell_stat (CELL cat, long int *count, struct Cell_stats *s);
extern  char * G_find_file (char *element, char *name, char *mapset);
extern  char * G_find_file2 (char *element, char *name, char *mapset);
extern  char * G_find_key_value (char *key, struct Key_Value *kv);
extern  char * G_find_sites (char *name, char *mapset);
extern  char * G_find_sites2 (char *name, char *mapset);
extern  char * G_find_vector (char *name, char *mapset);
extern  char * G_find_vector2 (char *name, char *mapset);
extern  FILE * G_fopen_append (char *element, char *name);
extern  FILE * G_fopen_modify (char *element, char *name);
extern  FILE * G_fopen_new (char *element, char *name);
extern  FILE * G_fopen_old (char *element, char *name, char *mapset);
extern  FILE * G_fopen_sites_new (char *name);
extern  FILE * G_fopen_sites_old (char *name, char *mapset);
extern  FILE * G_fopen_support_new (char *element, char *name, char *mapset);
extern  FILE * G_fopen_support_old (char *element, char *name, char *mapset);
extern  FILE * G_fopen_vector_new (char *name);
extern  FILE * G_fopen_vector_old (char *name, char *mapset);
extern  void G_fork(void);
extern  void G_format_easting (double east, char *buf, int projection);
extern  void G_format_northing (double north, char *buf, int projection);
extern  void G_format_resolution (double res, char *buf, int projection);
extern  struct Key_Value * G_fread_key_value (FILE *fd);
extern 	void G_free(void *ptr);
extern  void G_free_cats (struct Categories *pcats);
extern  void G_free_cell_stats (struct Cell_stats *s);
extern  void G_free_colors (struct Colors *colors);
extern  void G_free_fmatrix(float **m);
extern  int G_free_histogram (struct Histogram *histogram);
extern  void G_free_imatrix(int **m);
extern  void G_free_imatrix(int **m);
extern  void G_free_ivector(int *v);
extern  void G_free_ivector(int *v);
extern  void G_free_key_value(struct Key_Value *kv);
extern  void G_free_matrix(double **m);
extern  void G_free_reclass (struct Reclass *reclass);
extern  int G_free_tokens (char **tokens);
extern  void G_free_vector(double *v);
extern  char * G_fully_qualified_name (char *name, char *mapset);
extern  int G_fwrite_key_value (FILE *fd, struct Key_Value *kv);
extern  double G_geodesic_distance (double lon1, double lat1, double lon2, double lat2);
extern  double G_geodesic_distance_lon_to_lon (double lon1, double lon2);
extern  double G_geodesic_lat_from_lon (double lon);
extern  int G_get_3dview(char *fname, char *mapset, struct G_3dview *View);
extern  int G_get_3dview_defaults(struct G_3dview *v, struct Cell_head *w);
extern  char * G_get_ask_return_msg(void);
extern  char * G_get_cat (CELL num, struct Categories *pcats);
extern  char * G_get_cats_title (struct Categories *pcats);
extern  char * G_get_cell_title (char *name, char *mapset);
extern  int G_get_cellhd (char *name, char *mapset, struct Cell_head *cellhd);
extern  int G_get_color (CELL n, int *red, int *grn, int *blu, struct Colors *colors);
extern  void G_get_color_range(CELL *min, CELL *max, struct Colors *colors);
extern  int G_get_default_window (struct Cell_head *window);
extern  int G_get_ellipsoid_by_name (char *name, double *a, double *e2);
extern  int G_get_ellipsoid_parameters (double *a, double *e2);
extern  CELL G_get_histogram_cat (int n, struct Histogram *histogram);
extern  long G_get_histogram_count (int n, struct Histogram *histogram);
extern  int G_get_histogram_num (struct Histogram *histogram);
extern  int G_get_map_row (int fd, register CELL *buf, int row);
extern  int G_get_map_row_nomask (int fd, CELL *cell, int row);
extern  struct Key_Value * G_get_projinfo(void);
extern  struct Key_Value * G_get_projunits(void);
extern  void G_get_range_min_max(struct Range *range, CELL *min, CELL *max);
extern  int G_get_reclass (char *name, char *mapset, struct Reclass *reclass);
extern  int G_get_set_window (struct Cell_head *window);
extern  int G_get_site (FILE *fd, double *east, double *north, char **desc);
extern  int G_get_window (struct Cell_head *window);
extern  char * G_getenv (char *name);
extern  int G_getl (char *buf, int n, FILE *fd);
extern  int G_gets (char *buf);
extern  char * G_gisbase(void);
extern  char * G_gisdbase(void);
extern  void G_gishelp(char *helpfile, char *request);
extern  void G_gisinit(char *pgm);
extern  void G_histogram_eq (struct Histogram *histo, unsigned char **map, CELL *min, CELL *max);
extern  char * G_home (void);
extern  char * G_index (register char *str, register char delim);
extern  void G_init_cats (CELL num, char *title, struct Categories *pcats);
extern  int G_init_cell_stats(struct Cell_stats *s);
extern  void G_init_colors (struct Colors *colors);
extern  void G_init_histogram (struct Histogram *histogram);
extern  void G_init_range (struct Range *range);
extern  void G_insert_commas(char *buf);
extern  char G_intr_char();
extern  void G_invert_colors (struct Colors *colors);
extern  int G_is_reclass (char *name, char *mapset, char *rname, char *rmapset);
extern  void G_lat_format (double lat, char *buf);
extern  void G_lat_format (lat, buf);
extern  char * G_lat_format_string(void);
extern  void G_lat_parts (double lat, int *d, int *m, double *s, char *h);
extern  int G_lat_scan (char *buf, double *lat);
extern  int G_legal_filename (char *s);
extern  int G_limit_east (double *east, int proj);
extern  int G_limit_north (double *north, int proj);
extern  int G_limit_south (double *south, int proj);
extern  int G_limit_west (double *west, int proj);
extern  void G_list_element (char *element, char *desc, char *mapset, int (*lister) ());
extern  void G_llres_format (double res, char *buf);
extern  void G_llres_format (res, buf);
extern  char * G_llres_format_string(void);
extern  int G_llres_scan (char *buf, double *res);
extern  char * G_location(void);
extern  char * G_location_path(void);
extern  void G_lon_format (double lon, char *buf);
extern  void G_lon_format (lon, buf);
extern  char * G_lon_format_string(void);
extern  void G_lon_parts (double lon, int *d, int *m, double *s, char *h);
extern  int G_lon_scan (char *buf, double *lon);
extern  void G_lookup_colors (CELL *cell, unsigned char *red, unsigned char *grn, unsigned char *blu, unsigned char *set, int n, struct Colors *colors);
extern  int G_lookup_key_value_from_file(char *file, char *key, char *value, int n);
extern  void G_lubksb(double **a, int n, int *indx, double *b);
extern  int G_ludcmp(double **a, int n, int *indx, double *d);
extern  int G_make_aspect_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_make_color_ramp  (struct Colors *colors, CELL min, CELL max) /* for 3.0 compatibility */;
extern  int G_make_color_wave  (struct Colors *colors, CELL min, CELL max) /* for 3.0 compatibility */;
extern  int G_make_colors (char *name, char *mapset, struct Colors *pcolr);
extern  int G_make_grey_scale  (struct Colors *colors, CELL min, CELL max) /* for 3.0 compatibility */;
extern  int G_make_grey_scale_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_make_gyr_colors (struct Colors *colors, CELL min, CELL max);
extern  void G_make_histogram_cs (struct Cell_stats *statf, struct Histogram *histogram);
extern  void G_make_histogram_eq_colors (struct Colors *colors, struct Cell_stats *statf);
extern  int G_make_rainbow_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_make_ramp_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_make_random_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_make_red_yel_grn  (struct Colors *colors, CELL min, CELL max) /* for 3.0 compatibility */;
extern  int G_make_ryg_colors (struct Colors *colors, CELL min, CELL max);
extern  int G_make_wave_colors  (struct Colors *colors, CELL min, CELL max);
extern  char * G_malloc (int n);
extern  char * G_mapset(void);
extern  char * G_mask_info (void);
extern  int G_maskfd (void);
extern  double G_meridional_radius_of_curvature (double lon, double a, double e2);
extern  char * G_myname(void);
extern  void G_newlines_to_spaces(char *s);
extern  int G_next_cell_stat (CELL *cat, long int *count, struct Cell_stats *s);
extern  void G_no_gisinit(void);
extern  double G_northing_to_row (double north, struct Cell_head *window);
extern  CELL G_number_of_cats (char *name, char *mapset);
extern  int G_open_cell_new (char *name);
extern  int G_open_cell_new_random (char *name);
extern  int G_open_cell_new_uncompressed (char *name);
extern  int G_open_cell_old (char *name, char *mapset);
extern  int G_open_new (char *element, char *name);
extern  int G_open_old (char *element, char *name, char *mapset);
extern  int G_open_support_new (char *element, char *name, char *mapset);
extern  int G_open_support_old (char *element, char *name, char *mapset);
extern  int G_open_update (char *element, char *name);
extern  int G_parser(int argc, char **argv);
extern  void G_pclose(FILE *ptr);
extern  void G_percent (int n, int d, int s);
extern  double G_planimetric_polygon_area(double *x, double *y, int n);
extern  void G_plot_fx (double (*f) (), double east1, double east2);
extern  void G_plot_line (double east1, double north1, double east2, double north2);
extern  void G_plot_line2 (double east1, double north1, double east2, double north2);
extern  void G_plot_point (double east, double north);
extern  int G_plot_polygon (double *x, double *y, int n);
extern  void G_plot_where_en (int x, int y, double *east, double *north);
extern  void G_plot_where_xy (double east, double north, int *x, int *y);
extern  int G_pole_in_polygon(double *x, double *y, int n);
extern  FILE * G_popen(char *cmd, char *mode);
extern  char * G_program_name(void);
extern  int G_projection (void);
extern  int G_put_3dview(char *fname, char *mapset, struct G_3dview *View, struct Cell_head *Win);
extern  int G_put_cell_title (char *name, char *title);
extern  int G_put_cellhd (char *name, struct Cell_head *cellhd);
extern  int G_put_map_row (int fd, CELL *buf);
extern  int G_put_map_row_random (int fd, CELL *buf, int row, int col, int n);
extern  int G_put_reclass (char *name, struct Reclass *reclass);
extern  void G_put_site (FILE *fd, double east, double north, char *desc);
extern  int G_put_window (struct Cell_head *window);
extern  void G_putenv (char *name, char *value);
extern  void G_radius_of_conformal_tangent_sphere (double lon, double a, double e2);
extern  int G_read_cats (char *name, char *mapset, struct Categories *pcats);
extern  int G_read_colors (char *name, char *mapset, struct Colors *colors);
extern  int G_read_histogram (char *name, char *mapset, struct Histogram *histogram);
extern  int G_read_history (char *name, char *mapset, struct History *hist);
extern  struct Key_Value * G_read_key_value_file(char *file, int *stat);
extern  int G_read_range (char *name, char *mapset, struct Range *range);
extern  int G_read_vector_cats (char *name, char *mapset, struct Categories *pcats);
extern  char * G_realloc (char *buf, int n);
extern  char * G_recreate_command(void);
extern  int G_remove (char *element, char *name);
extern  int G_remove_colr (char *name);
extern  void G_remove_commas(char *buf);
extern  int G_rename (char *element, char *oldname, char *newname);
extern  void G_rewind_cell_stats (struct Cell_stats *s);
extern  double G_rhumbline_lat_from_lon (double lon);
extern  char * G_rindex (register char *str, register char delim);
extern  int G_row_repeat_nomask (int fd, int row);
extern  double G_row_to_northing (double row, struct Cell_head *window);
extern  void G_row_update_range (CELL *cell, int n, struct Range *range);
extern  int G_scan_easting (char *buf, double *easting, int projection);
extern  int G_scan_northing (char *buf, double *northing, int projection);
extern  int G_scan_resolution (char *buf, double *res, int projection);
extern  void G_set_ask_return_msg (char *msg);
extern  int G_set_cat (CELL num, char *label, struct Categories *pcats);
extern  void G_set_cats_fmt (char *fmt,float m1, float a1, float m2, float a2, struct Categories *pcats);
extern  void G_set_cats_title (char *title, struct Categories *pcats);
extern  void G_set_cell_format (int n);
extern  int G_set_color (CELL cat, int r, int g, int b, struct Colors *colors);
extern  void G_set_color_range (CELL min, CELL max, struct Colors *colors);
extern  void G_set_distance_to_line_tolerance (double t);
extern  void G_set_error_routine (int (*error_routine) ());
extern  void G_set_geodesic_distance_lat1(double lat1);
extern  void G_set_geodesic_distance_lat2(double lat2);
extern  void G_set_histogram (CELL cat, long int count, struct Histogram *histogram);
extern  int G_set_key_value (char *key, char *value, struct Key_Value *kv);
extern  void G_set_list_hit_return(int flag);
extern  void G_set_program_name (char *s);
extern  int G_set_window (struct Cell_head *window);
extern  void G_setenv (char *name, char *value);
extern  void G_setup_plot (double t, double b, double l, double r, int (*Move) (), int (*Cont) ());
extern  void G_shift_colors (int shift, struct Colors *colors);
extern  int G_short_history (char *name, char *type, struct History *hist);
extern  void G_shortest_way (double *east1, double *east2);
extern  int G_sleep_on_error (int flag);
extern  void G_sort_cats (struct Categories *pcats);
extern  void G_sort_histogram (struct Histogram *histogram);
extern  void G_sort_histogram_by_count (struct Histogram *histogram);
extern  char * G_squeeze (char *line);
extern  char * G_store (char *s);
extern  int G_strcasecmp(char *x, char *y);
extern  char * G_strcat (register char *T, register char *F);
extern  char * G_strcpy (register char *T, register char *F);
extern  char * G_strdup(char *string);
extern  char * G_strend (register char *S);
extern  void G_strip (register char *buf);
extern  char * G_strmov (register char *T, register char *F);
extern  char * G_strncpy (register char *T, register char *F, register int n);
extern  char * G_strstr(char *mainString, char *subString);
extern  void G_suppress_masking(void);
extern  int G_suppress_warnings (int flag);
extern  void G_svbksb(double **u, double *w, double **v, int m, int n, double *b, double *x);
extern  int G_svdcmp(double **a, int m, int n, double *w, double **v);
extern  void G_svelim(double *w, int n);
extern  int G_system (char *command);
extern  char * G_tempfile(void);
extern  char ** G_tokenize (char *buf, char *delim);
extern  char * G_tolcase (char *string);
extern  char * G_toucase (char *string);
extern  int G_tqli(double *d, double *e, int n, double **z);
extern  double G_transverse_radius_of_curvature (double lon, double a, double e2);
extern  void G_tred2(double **a, int n, double *d, double *e);
extern  void G_trim_decimal (char *buf);
extern  char * G_unctrl(unsigned char c);
extern  int G_unopen_cell (int fd);
extern  void G_unset_error_routine (void);
extern  void G_unsetenv (char *name);
extern  void G_update_cell_stats (CELL *cell, int n, struct Cell_stats *s);
extern  int G_update_key_value_file (char *file, char *key, char *value);
extern  void G_update_range (CELL cat, struct Range *range);
extern  void G_usage(void);
extern  void G_want_histogram(int flag);
extern  void G_warning (char *msg);
extern  char * G_whoami(void);
extern  int G_window_cols (void);
extern  int G_window_overlap (struct Cell_head *window, double N, double S, double E, double W);
extern  double G_window_percentage_overlap (struct Cell_head *window, double N, double S, double E, double W);
extern  int G_window_rows (void);
extern  int G_write_cats (char *name, struct Categories *cats);
extern  int G_write_colors (char *name, char *mapset, struct Colors *colors);
extern  int G_write_histogram (char *name, struct Histogram *histogram);
extern  int G_write_histogram_cs (char *name, struct Cell_stats *statf);
extern  int G_write_history (char *name, struct History *hist);
extern  int G_write_key_value_file (char *file, struct Key_Value *kv, int *stat);
extern  int G_write_range (char *name, struct Range *range);
extern  int G_write_vector_cats (char *name, struct Categories *cats);
extern  void G_write_zeros(int fd, long int n);
extern  int G_yes (char *question, int dflt);
extern  void G_zero (register char *buf, register int i);
extern  void G_zero_cell_buf (register CELL *buf);
extern  void G_zero_histogram (struct Histogram *histogram);
extern  int G_zone (void);
extern  void my_set_env(char *gisdbase,char *location,char *mapset);

/* Vask lib */
extern int V_call(void);
extern void V_clear(void);
extern  int V_const (int *src, char var_type, int row, int col, int length); 
extern  int V_line (register int linenumber, register char *text);
extern  int V_ques(int *src, char var_type, int row, int col, int length) ;
extern  void V_intrpt_ok(void);
extern  void V_intrpt_msg (char * msg);



#endif
